"""
Программа принимает на вход натуральное число N.
Ваша задача вывести на экран все числа от 1 до N каждое число на отдельной строке.
"""
n = int(input())
for i in range(1,n+1):
    print(i)

"""
Программа принимает на вход натуральное число N. 
Ваша задача вывести на экран все числа от N до 1 в сторону уменьшения 
каждое число на отдельной строке. 
"""
n = int(input())
for i in range(n,0,-1):
    print(i)

"""
Напишите программу, которая считывает два натуральных числа a и b 
(гарантируется, что a<b), после чего для всех чисел от a до b включительно выводит:
- “Fizz”, если это число делится на 3;
- “Buzz”, если это число делится на 5;
- “FizzBuzz”, если выполнены оба предыдущих условия;
- само это число в остальных случаях.
Формат ввода
Два числа a и b, каждое на отдельной строке.
Формат вывода
Для всех чисел от a до b напечатайте по одной строке, соответствующей правилам, 
описанным в условии.
"""
a = int(input())
b = int(input())
for i in range(a,b+1):
    if i % 3 == 0 and i % 5 == 0:
        print('FizzBuzz')
    elif i % 3 == 0:
        print('Fizz')
    elif i % 5 == 0:
        print('Buzz')

    else:
        print(i)

"""
Правила её очень просты: сначала определяется значение n — количество раундов игры. 
В очередном раунде каждый из игроков один раз бросает стандартный игральный кубик, 
на грани которого нанесены различные числа от 1 до 6. Игрок, 
выбросивший большее значение, становится победителем в раунде. 
В случае, если выпавшие значения равны, победа не засчитывается никому.
В самой же игре побеждает участник, выигравший в большем количестве раундов. 
Если же количества побед, заслуженных игроками, равны, то объявляется ничья.
Входные данные
В первой строке входных данных содержится число n (
1<=n<=>100) — количество раундов игры.
Следующие n строк содержат описание раундов. В i-й из них содержится пара целых 
чисел mi и ci (1<=>mi,ci<=>6) — результаты бросков Мишки и Криса в i-ом раунде 
соответственно.
Выходные данные
В случае победы Мишки в единственной строке выведите "Mishka" 
(без кавычек), а в случае победы Криса выведите "Chris" 
(без кавычек). Если же игра сведётся к ничьей, 
то выведите "Friendship is magic!^^" (без кавычек).
"""
n = int(input())
count_m = 0
count_k = 0
count_n = 0
for i in range(n):
    m,c = map(int, input().split())
    if m > c:
        count_m += 1
    elif m < c:
        count_k += 1
    elif m == c:
        count_n += 1
if count_m > count_k:
    print('Mishka')
elif count_m < count_k:
    print('Chris')
else:
    print('Friendship is magic!^^')

"""
Найдите, в каких строках из введённых и в каком месте упоминается "рок", 
причем регистр букв не важен.
Вместо явного цикла прохода по строке в цикле используйте подходящий метод строки.
Формат ввода
На первой строке вводится натуральное число N — количество строк.
Далее следуют N строк.
Формат вывода
Для каждой строки, в которой есть сочетание символов «рок», 
нужно вывести (в порядке появления таких строк) номер этой строки 
(нумерация начинается с единицы) и номер символа, 
с которого начинается первое вхождение этой подстроки (нумерация символов 
также с единицы).
"""
n = int(input())
for i in range(n):
    a = input().lower()
    if 'рок' in a:
        print(i+1, a.find('рок')+1)

"""
Предположим, вы переписываете у друга рецепты в блокнотик, 
но вам не нравится "соль". Переписывайте без него.
Формат ввода
На первой строке вводится натуральное число N — количество пунктов рецепта.
Далее следуют N строк — пункты рецепта.
Формат вывода
Одна строка — пункты рецепта, разделённые запятой и пробелом, 
без пунктов с упоминанием слова "соль" (то есть таких, 
в которых нет подстроки "соль" в нижнем регистре).
"""
n = int(input())
l = []
for i in range(n):
    a = input()
    if not 'соль' in a:
        l.append(a)
print (', '.join(l))

"""
Если перечислить все натуральные числа ниже 10, 
которые кратны 3 или 5, то получим 3, 5, 6 и 9. Сумма этих чисел 23.
Напишите программу, которая принимает натуральное число n и находит 
сумму всех чисел ниже переданного числа n, которые делятся на 3 или на 5.
"""
n = int(input())
s = 0
for i in range(n-1,0,-1):
    if i % 3 == 0 or i % 5 == 0:
        s += i
print(s)

"""
Иногда некоторые слова вроде «civilization» или «internationalization» настолько 
длинны, что их весьма утомительно писать много раз в каком либо тексте.
Будем считать слово слишком длинным, если его длина строго больше 10 символов. 
Все слишком длинные слова можно заменить специальной аббревиатурой.
Эта аббревиатура строится следующим образом: записывается первая и последняя 
буква слова, а между ними — количество букв между первой и последней буквой 
(в десятичной системе счисления и без ведущих нулей).
Таком образом, «civilization» запишется как «c10n», а «internationalization» 
как «i18n».
Вам предлагается автоматизировать процесс замены слов на аббревиатуры. 
При этом все слишком длинные слова должны быть заменены аббревиатурой, 
а слова, не являющиеся слишком длинными, должны остаться без изменений.
Входные данные
В первой строке содержится целое число n (1<=n<=100). В каждой из последующих 
n строк содержится по одному слову. Все слова состоят из малых латинских букв 
и имеют длину от 1 до 100 символов.
Выходные данные
Выведите n строк. В i строке должен находиться результат замены i-го 
слова из входных данных.
"""
n = int(input())
for i in range(n):
    a = input()
    if len(a) >= 10:
        a = a[0]+str(len(a)-2)+a[-1]
        print(a)
    else:
        print(a)

"""
Ваша задача создать список из n строк. Программа сперва будет принимать н
атуральное число n, а затем n строк в каждой отдельной строке. 
В качестве ответа выведите получившийся список.
"""
n = int(input())
b = []
for i in range(0,n):
    a = input()
    b.append(a)
print(b)

"""
Входные данные
На первой строке вводится один символ — строчная буква.
На второй строке вводится предложение.
Выходные данные
Нужно вывести список слов (словом считается часть предложения, 
окружённая символами пустого пространства), в которых присутствует 
введённая буква в любом регистре, в том же порядке, 
в каком они встречаются в предложении.
"""
a = input()
b = input()
c = list(b.split())
for i in c:
    if a in i:
        print(i)

"""
На вход программе поступает список из целых чисел. 
Ваша задача найти в данном списке наименьшее положительное значение. 
В случае, если положительных значений нет, выведите строку "Empty"
"""
a = map(int, input().split())
b = []
for i in a:
    if i > 0:
        b.append(i)
if len(b) == 0:
    print('Empty')
else:
    b.sort()
    print(b[0])

"""
Напишите программу, которая находит рекордное количество вхождений 
(не обязательно подряд) символа в строку.
Формат ввода
Вводится одна строка.
Формат вывода
Выводится одно целое число — максимальное количество раз, 
которое встречается какая-либо буква (без учёта регистра) или 
иной символ во введённой строке.
"""
n = input().lower()
b = []
for i in n:
    b.append(n.count(i))
print(max(b))

"""
Для делимости числа на 11 необходимо, чтобы разность между суммой цифр, 
стоящих на четных местах, и суммой цифр, стоящих на нечетных местах, делилась на 11.
Требуется написать программу, которая проверит делимость заданного числа на 11.
Входные данные
Программа получает на вход одно натуральное число N, 
делимость которого надо проверить (1 ≤ N ≤ 1010000).
Выходные данные
Выведите “YES”, если число делится на 11, или “NO” иначе.
"""
n = int(input())
n = str(n)
chet = 0
nechet = 0

for i in n[::2]:
    chet = chet + int(i)
for i in n[1::2]:
    nechet = nechet + int(i)

if (chet - nechet) % 11 == 0:
    print('YES')
else:
    print('NO')

"""
На вход программе поддается строка, а ваша задача определить сколько 
символов в данной строке являются цифрами и также найти сумму всех этих цифр. 
Например, в строке "Комната 1408" содержится 4 цифры и их сумма равна 13.
В качестве ответа необходимо через пробел вывести 2 числа - количество цифр 
в введенной строке и их сумма
"""
a = input().lower()
b = '1234567890'
sum = 0
c = len(a)
d = 0
for i in range(c):
    if a[i] in b:
        sum += 1
        d += int(a[i])
print(sum, d)

"""
Наша программа принимает на вход последовательность скобочных символов. 
Ваша задача определить является ли введенная скобочная последовательность правильной.
Правильная скобочная последовательность (ПСП) называется строка, 
состоящая только из символов "скобки", где каждой закрывающей скобке 
найдётся соответствующая открывающая (причём того же типа). При этом учитывайте, что:
- Пустая последовательность является правильной.
- Если A – правильная скобочная последовательность, то (A), [A] и {A} – 
правильные скобочные последовательности.
- Если A и B – правильные скобочные последовательности, то AB – 
правильная скобочная последовательность.
Если введенная строка является ПСП, выведите YES, в противном случае - NO.
"""
n = input()
l_br = ['(','[','{']
r_br = [')',']','}']
my_sequence = []
for i in n:
    if i in l_br:
        my_sequence.append(i)
    elif i in r_br:
        if my_sequence:
            if my_sequence[-1]=='(' and i ==')':
                my_sequence.pop()
            elif my_sequence[-1]=='[' and i ==']':
                my_sequence.pop()
            elif my_sequence[-1]=='{' and i == '}':
                my_sequence.pop()
        elif not my_sequence:
            my_sequence.append(i)
if not my_sequence:
    print('YES')
else:
    print('NO')

"""
метод подсчета
На вход вашей программе поступает положительное целое число n, 
а ваша задача вывести в порядке возрастания все цифры, 
которые встречались в этом числе, и напротив каждого также необходимо 
вывести сколько раз данная цифра встречалась в числе n
"""
n = sorted(input())
l = []
for i in n:
    c = 0
    for k in n:
        if i == k:
            c += 1
    if i in l:
        continue
    else:
        print(i,c)
    l.append(i)

"""
Сортировка подсчетом
Как видно из названия задачи, вам необходимо отсортировать список, 
состоящий только из чисел в пределах от -100 до 100 включительно, 
сортировкой подсчетом.
Программа получает на вход число n - количество элементов в списке, 
затем сами элементы списка
Вам необходимо вывести отсортированный список
"""
n = int(input())
a = list(input().split())
count = [0] * 201
for i in a:
    count[int(i) + 100] += 1
for i in range(201):
    if count[int(i)] > 0:
        print((str(int(i) - 100)+ ' ') * count[i], end='')



"""
Напишите функцию check_password, которая проверяет переданный ей пароль
на сложность и печатает на экран результат проверки.
Сложным паролем будет считаться комбинация символов, в которой :
- Есть хотя бы 3 цифры
- Есть хотя бы одна заглавная буква
- Есть хотя бы один символ из следующего набора "!@#$%*"
- Общая длина не менее 10 символов
Если пароль прошел все проверки, функция должна вывести на
экран фразу "Perfect password", в противном случае - "Easy peasy"
"""


def check_password(s):
    count_dig = 0
    count_up = 0
    count_spec = 0
    spis = "!@#$%*"
    for i in list(s):
        if i.isdigit():
            count_dig += 1
        elif i.isupper():
            count_up += 1
        elif i in spis:
            count_spec += 1
    if count_dig >= 3 and count_up >= 1 and count_spec >= 1 and len(s) >= 10:
        print('Perfect password')
    else:
        print('Easy peasy')


"""
Создайте функцию count_letters, которая принимает на вход фразу и подсчитывает, 
какое количество в ней строчных(K) и заглавных (N) букв. 
Функция должна вывести на экран информацию о найденных буквах в определенном формате.
Количество заглавных символов: N
Количество строчных символов: K
"""


def count_letters(x):
    count = 0
    col = 0
    for i in list(x):
        if i.isupper():
            count += 1
        if i.islower():
            col += 1
    print(f'Количество заглавных символов: {count}')
    print(f'Количество строчных символов: {col}')


"""
Ваша задача написать функция find_duplicate, 
которая принимает один аргумент - список чисел. 
Функция должна возвращать список из дублей, каждый дубль нужно брать 
только один раз в том порядке, в котором они встречаются в исходном списке. 
Под дублем будем подразумевать число, которое присутствовало в списке несколько раз. 
"""


def find_duplicate(x):
    b = []
    for i in x:
        if x.count(i) >= 2 and i not in b:
            b.append(i)
    return b


"""
Напишите функцию first_unique_char, которая принимает строку символов и 
возвращает позицию первого уникального символа в строке. 
В случае, если уникальных символов в переданной строке нет, верните -1. 
Регистр символов не учитывайте.
"""


def first_unique_char(x):
    a = []

    for i in x.lower():
        if x.count(i) == 1:
            a.append(x.find(i))
    if len(a) > 0:
        return a[0]
    else:
        return -1


"""
Напишите функцию, которая имя и возраст водителя. 
Функция должна распечатать на экран заключение, может ли данный водитель 
управлять транспортом и определять она должна это по возрасту водителя: 
он должен быть больше или равен MIN_DRIVING_AGE
Если водитель может управлять, выведите фразу "<name> может водить> " , 
в противном случае "<name> еще рано садиться за руль" 
"""
MIN_DRIVING_AGE = 18


def allowed_driving(name, age):
    if age < MIN_DRIVING_AGE:
        print(name, 'еще рано садиться за руль')
    else:
        print(name, 'может водить')


"""
Напишите функцию count_args, которая принимает произвольное количество аргументов. 
Данная функция должна возвращать количество переданных ей на вход аргументов
"""


def count_args(*args):
    return (len(args))


"""
Давайте теперь создадим функцию print_goods, которая печатает список покупок. 
На вход она будет принимать произвольное количество значений, 
а товаром мы будем считать любые непустые строки. 
То есть числа, списки, словари и другие нестроковые объекты вам нужно 
будет проигнорировать. Функция print_goods должна печатать список 
товаров в виде: <Порядковый номер товара>. <Название товара>. 
В случае, если в переданных значениях не встретится ни одного товара, 
необходимо распечатать текст "Нет товаров"
"""


def print_goods(*args):
    count = 0
    for i in args:
        if type(i) == str and i != '':
            count += 1
            print(f'{count}. {i}')
    if count == 0:
        print('Нет товаров')


"""
Напишите функцию info_kwargs, которая принимает произвольное 
количество именованных аргументов.
Функция info_kwargs должна распечатать именованные аргументы в 
каждой новой строке в виде пары <Ключ> = <Значения>, 
причем ключи должны следовать в алфавитном порядке.
"""


def info_kwargs(**kwargs):
    keys = sorted(kwargs)
    for k in keys:
        print(k, '=', kwargs[k])


"""
Дано натуральное число N и последовательность из N элементов. 
Требуется вывести эту последовательность в обратном порядке.
Входные данные
Программа принимает на вход натуральное число N (N ≤ 103). 
Во второй строке через пробел идут N целых чисел, по модулю не 
превосходящих 103 - элементы последовательности.
Выходные данные
Ваша задача вывести заданную последовательность в обратном порядке.
"""
n = int(input())
a = list(map(int, input().split()))


def rec(n):
    if (n - 1) >= 0:
        print(a[n - 1], end=' ')
        rec(n - 1)


rec(n)

"""
Последовательностью Фибоначчи называется последовательность 
чисел a0, a1, ..., an, ..., где
a0 = 0, a1 = 1, ak = ak-1 + ak-2 (k > 1).
Требуется найти N-е число Фибоначчи.
Входные данные
Программе поступает на вход целое число N (0 ≤ N ≤ 30) - порядковый 
номер числа Фибоначчи.
Выходные данные
Вам необходимо вывести на экран N-е число Фибоначчи.
"""


def posled_F(x):
    if x == 0:
        return 0
    elif x == 1:
        return 1
    else:
        return posled_F(x - 1) + posled_F(x - 2)
print(posled_F(int(input())))

"""
Напишите функцию list_sum_recursive, которая принимает на вход список из 
целых чисел и возвращает сумму элементов переданного списка.
"""
def list_sum_recursive(n):
    if len(n) == 0:
        return 0
    if len(n) == 1:
        return(n[0])
    return n[0] + list_sum_recursive(n[1:])

"""
Напишите lambda функцию, которая принимает одно число и увеличивает его на 10.
"""
adding_10 = lambda x: x+10

"""
Напишите lambda функцию, которая принимает 
строку и отвечает на вопрос начинается ли переданная строка с буквы W
"""
starts_with = lambda s: s.startswith('W')

"""
В python есть стандартный модуль datetime. 
Внутри него имеется функция datetime.datetime.now() при помощи которой, 
можно найти текущую дату в формате (год, месяц, день, час, минуты, секунды, млсекунды)
Ваша задача написать три lambda функция, 
которые принимают текущую дату и возвращают год, месяц и день соответственно.
Эти три lambda функции нужно будет сохранить в 
переменные get_year, get_month и get_day соответственно.
"""
import datetime
now = datetime.datetime.now()
get_year = lambda now: now.year
get_month = lambda now: now.month
get_day = lambda now: now.day